rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isRecruiter() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'recruiter';
    }
    
    function isCandidate() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'candidate';
    }
    
    function hasValidUserProfile() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid));
    }

    // Users collection - allow read for chat functionality, write only for own profile
    match /users/{userId} {
      allow read: if isAuthenticated(); // Allow reading all user profiles for chat search
      allow create: if isAuthenticated() && isOwner(userId);
      allow update: if isAuthenticated() && isOwner(userId);
      allow delete: if false;
      
      // User chats subcollection - allow read/write for chat functionality
      match /chats/{chatId} {
        allow read, write: if isAuthenticated(); // Allow all authenticated users to read/write chats
        
        // Messages subcollection within user chats
        match /messages/{messageId} {
          allow read, write: if isAuthenticated(); // Allow all authenticated users to read/write messages
        }
      }
    }

    // Jobs collection - all authenticated users can read, only recruiters can create/update
    match /jobs/{jobId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.recruiterId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.recruiterId == request.auth.uid;
    }

    // Applications collection - candidates can create their own, recruiters can read/update/delete
    match /applications/{applicationId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.candidateId == request.auth.uid;
      allow update: if isAuthenticated() && (
        resource.data.candidateId == request.auth.uid || 
        resource.data.recruiterId == request.auth.uid
      );
      allow delete: if isAuthenticated() && resource.data.recruiterId == request.auth.uid;
    }

    // Legacy chats collection - participants can read/write (keeping for backward compatibility)
    match /chats/{chatId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && request.auth.uid in resource.data.participants;
      allow delete: if false;
    }

    // Legacy messages subcollection - participants can read/write (keeping for backward compatibility)
    match /chats/{chatId}/messages/{messageId} {
      allow read: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      allow create: if isAuthenticated() && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants &&
        request.resource.data.senderId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    // Resume checker results - users can only access their own
    match /resumeResults/{resultId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Job bookmarks - users can only access their own
    match /bookmarks/{bookmarkId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Notifications - users can only access their own
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }

    // Company profiles - recruiters can manage their company
    match /companies/{companyId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && resource.data.ownerId == request.auth.uid;
      allow delete: if false;
    }

    // Skills collection - read-only for all authenticated users
    match /skills/{skillId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    // Job categories - read-only for all authenticated users
    match /categories/{categoryId} {
      allow read: if isAuthenticated();
      allow write: if false;
    }

    // System settings - admin only
    match /settings/{settingId} {
      allow read, write: if false;
    }

    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 